ndvi.matrix[,1:12]
ndvi.matrix[1:12,]
ndvi.matrix[,1]
ndvi.matrix[1,]
df_ndvi[1,2] <- mean(as.numeric(df_ndvi[1,2:13]),na.rm=T)
df_ndvi %>% melt(id.vars="year")
ndvi.matrix <- as.matrix(df_ndvi[,2:12])
View(ndvi.matrix)
View(df_ndvi)
ndvi.matrix <- as.matrix(df_ndvi[1:18,2:13])
View(ndvi.matrix)
seq("2000","2018")
str(seq("2000","2018"))
df_ndvi<-data.frame(date=dates,data_ndvi)  %>%
mutate(month = substr(date, 6, 7), year = substr(date, 1, 4)) %>%
group_by(year,month) %>%
summarize(ndvi = mean(data_ndvi,na.rm = T)) %>%
pivot_wider(names_from = month, values_from= ndvi) %>%
relocate("01", .after= year) %>%
dplyr::filter(year %in% seq("2000","2017"))
View(df_ndvi)
df_ndvi[1,2] <- mean(as.numeric(df_ndvi[1,2:13]),na.rm=T)
View(df_ndvi)
## Matriz NDVI de 2000 - 2017
ndvi.matrix <- as.matrix(df_ndvi[,2:13])
View(ndvi.matrix)
date <- seq(as.Date('1981-01-01'), as.Date('2018-02-01'), by = "month")
data_pp <- pp_velox$extract(sp = region, fun = function(x){ mean(x, na.rm = T) }) %>% as.vector()
df_pp <-data.frame(date=dates,data_pp)  %>%
mutate(month = substr(date, 6, 7), year = substr(date, 1, 4)) %>%
group_by(year,month) %>%
summarize(pp = mean(data_pp,na.rm = T)) %>%
pivot_wider(names_from = month, values_from= ndvi) %>%
relocate("01", .after= year)
date <- seq(as.Date('1981-01-01'), as.Date('2018-02-01'), by = "month")
data_pp <- pp_velox$extract(sp = region, fun = function(x){ mean(x, na.rm = T) }) %>% as.vector()
df_pp <-data.frame(date=date,data_pp)  %>%
mutate(month = substr(date, 6, 7), year = substr(date, 1, 4)) %>%
group_by(year,month) %>%
summarize(pp = mean(data_pp,na.rm = T)) %>%
pivot_wider(names_from = month, values_from= ndvi) %>%
relocate("01", .after= year)
df_pp <-data.frame(date=date,data_pp)  %>%
mutate(month = substr(date, 6, 7), year = substr(date, 1, 4)) %>%
group_by(year,month) %>%
summarize(pp = mean(data_pp,na.rm = T)) %>%
pivot_wider(names_from = month, values_from= pp) %>%
relocate("01", .after= year)
View(df_pp)
df_pp <-data.frame(date=date,data_pp)  %>%
mutate(month = substr(date, 6, 7), year = substr(date, 1, 4)) %>%
group_by(year,month) %>%
summarize(pp = mean(data_pp,na.rm = T)) %>%
pivot_wider(names_from = month, values_from= pp) %>%
relocate("01", .after= year) %>%
dplyr::filter(year %in% seq("2000","2017"))
View(df_pp)
pp.matrix <- as.matrix(df_pp[,2:13])
View(pp.matrix)
hist(pp.matrix)
hist(pp.matrix)
hist(pp.matrix[1,])
hist(df_pp)
hist(df_pp[,2:13])
hist(as.numeric(df_pp[,2:13]))
hist(pp.matrix)
hist(pp.matrix[1,])
pp.matrix[1,]
histogram(pp.matrix[1,])
hist(df_pp$`01`)
df_pp$`01`
enero <- df_pp$`01`
hist(enero)
hist(Ndvi_mensual_stack)
hist(pp.matrix[,1])
hist(pp.matrix)
hist(pp.matrix[,1])
hist(pp.matrix[,2])
hist(pp.matrix[,3])
hist(ndvi.matrix[,3])
pp.matrix[,1]
norm.test - function(matrix, pvalue){
for(j in 1:col(matrix)){
norm.list <- list()
notnorm.list <- list()
ifelse(shapiro.test(matrix[,j]) > pvalue,
norm.list[j] = matrix[,j],
norm.test - function(matrix, pvalue){
for(j in 1:col(matrix)){
norm.list <- list()
notnorm.list <- list()
ifelse(shapiro.test(matrix[,j]) > pvalue,
norm.list[j] == matrix[,j],
notnorm.list[j] == matrix[,j])
}
return(length(norm.list))
}
norm.test <- function(matrix, pvalue){
for(j in 1:col(matrix)){
norm.list <- list()
notnorm.list <- list()
ifelse(shapiro.test(matrix[,j]) > pvalue,
norm.list[j] == matrix[,j],
notnorm.list[j] == matrix[,j])
}
return(length(norm.list))
}
norm.test <- function(matrix, pvalue){
for(j in 1:col(matrix)){
norm.list <- list()
notnorm.list <- list()
ifelse(shapiro.test(matrix[,j]) > pvalue,
norm.list[j] = matrix[,j],
norm.test <- function(matrix, pvalue){
for(j in 1:col(matrix)){
norm.list <- list()
notnorm.list <- list()
if(shapiro.test(matrix[,j]) > pvalue){
norm.list[j] = matrix[,j]
} else{
notnorm.list[j] = matrix[,j]
}
}
return(length(norm.list))
}
norm.test(pp.matrix)
norm.test(pp.matrix,0.05)
norm.test <- function(matrix, pvalue){
for(j in 1:col(matrix)){
norm.list <- list()
notnorm.list <- list()
if(shapiro.test(matrix[,j]) > pvalue){
print(j)
norm.list[j] = matrix[,j]
} else{
print(j)
notnorm.list[j] = matrix[,j]
}
}
}
norm.test(pp.matrix,0.05)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:col(matrix)){
if(shapiro.test(matrix[,j]) > pvalue){
print(j)
norm.list[j] = matrix[,j]
} else{
print(j)
notnorm.list[j] = matrix[,j]
}
}
}
norm.test(pp.matrix,0.05)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:col(matrix)){
if(shapiro.test(matrix[,j]) > pvalue){
norm.list[j] = matrix[,j]
} else{
notnorm.list[j] = matrix[,j]
}
return(norm.list)
}
}
norm.test(pp.matrix,0.05)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:col(matrix)){
if(shapiro.test(matrix[,j]) > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
return(norm.list)
}
}
norm.test(pp.matrix,0.05)
norm.test(ndvi.matrix, 0.05)
View(ndvi.matrix)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:ncol(matrix)){
if(shapiro.test(matrix[,j]) > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
return(norm.list)
}
}
ncol(pp.matrix)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:ncol(matrix)){
if(shapiro.test(matrix[,j]) > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
return(norm.list)
}
}
norm.test(pp.matrix,0.05)
norm.test(ndvi.matrix, 0.05)
shapiro.test(ndvi.matrix[,1])
shapiro.test(ndvi.matrix[,2])
ndvi.matrix[,2]
ndvi.matrix[,3]
shapiro.test(ndvi.matrix[,3])
shapiro.test(ndvi.matrix[,4])
shapiro.test(ndvi.matrix[,5])
shapiro.test(ndvi.matrix[,6])
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:ncol(matrix)){
if(shapiro.test(matrix[,j])[2] > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
return(norm.list)
}
}
norm.test(pp.matrix,0.05)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:ncol(matrix)){
if(shapiro.test(matrix[,j])[2] > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
return(length(norm.list))
}
}
norm.test(pp.matrix,0.05)
shapiro.test(pp.matrix[,1])[2]
norm.list
norm.test(pp.matrix,0.05)
shapiro.test(pp.matrix[,1])[2]
shapiro.test(pp.matrix[,3])[2]
norm.list1 <- list()
norm.list[[1]] = pp.matrix[,1]
norm.list1[[1]] = pp.matrix[,1]
norm.list1[[2]] = pp.matrix[,2]
View(norm.list1)
norm.list1
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:ncol(matrix)){
if(shapiro.test(matrix[,j])[2] > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
return(norm.list)
}
}
norm.test(pp.matrix,0.05)
norm.test(pp.matrix,0.05)[2]
norm.test(pp.matrix,0.05)[1]
norm.test(pp.matrix,0.05)[[1]]
norm.test(pp.matrix,0.05)[[2]]
ncol(pp.matrix)
norm.test <- function(matrix, pvalue){
norm.list <- list()
notnorm.list <- list()
for(j in 1:ncol(matrix)){
if(shapiro.test(matrix[,j])[2] > pvalue){
norm.list[[j]] = matrix[,j]
} else{
notnorm.list[[j]] = matrix[,j]
}
}
return(norm.list)
}
norm.test(pp.matrix,0.05)
norm.test(ndvi.matrix, 0.05)
hist(pp-matrix)
hist(pp.matrix)
hist(pp.matrix[1,])
hist(pp.matrix[,1])
hist(pp.matrix[,3])
hist(pp.matrix[3,])
hist(pp.matrix[,3])
hist(pp.matrix)
hist(ndvi.matrix)
shapiro.test(ndvi.matrix)
shapiro.test(pp.matrix)
## Test de Shapiro-Wilk --------------------------------
shapiro.test(pp.matrix)
shapiro.test(pp.matrix)
shapiro.test(ndvi.matrix)
install.packages("nortest")
library(ggspatial)
library(ggpubr)
library(openxlsx)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sp)
library(sf)
library(rgee)
library(mapedit)
library(raster)
library(cptcity)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(leafem)
library(MASS)
library(dplyr)
library(ncdf4)
library(devtools)
library(velox)
library(signal)
library(foreach)
library(RColorBrewer)
library(reshape2)
library(nortest)
ad.test(pp.matrix)
ad.test(ndvi.matrix)
mtcars
mtcars[,2]
cv.lag(mtcars[,2],3)
library(YRmisc)
cv.lag(mtcars[,2],3)
n <- 1
x <- pp.matrix[,1]
len <- length(x)
b <- c(as.numeric(rep("NA",n)), (lag(as.ts(x), k = n)))
n <- 1
x <- pp.matrix[,1]
len <- length(x)
b <- c(as.numeric(rep("NA",n)), (stats::lag(as.ts(x), k = n)))
b <- b[1:len]
b
a <- data.frame(matrix(nrow = 1, ncol = 3))
a
View(a)
lag <- 1
lead <- 1
x <- pp.matrix[,1]
y <- ndvi.matrix[,1]
a <- data.frame(matrix(nrow = 1, ncol = lag + lead + 1))
View(a)
for(i in 1:lag){
b <- na.omit(cbind(cv.lag(x,i),y))
a[i]<-cor(b[,1],b[,2],use = "na.or.complete", method="spearman")
}
View(b)
a[lag+1] <- cor(x,y,use = "na.or.complete", method="spearman")
for (i in 1:lead) {
b <- na.omit(cbind(cv.lead(x,i),y))
a[i+lag+1] <- cor(b[,1],b[,2],use = "na.or.complete", method="spearman")
}
View(a)
cv.lag(pp.matrix)
cv.lag(pp.matrix,1)
cv.lag(pp.matrix,2)
lag <- 12
lead <- 12
x <- pp.matrix[,1]
y <- ndvi.matrix[,1]
a <- data.frame(matrix(nrow = 1, ncol = lag + lead + 1))
for(i in 1:lag){
b <- na.omit(cbind(cv.lag(x,i),y))
a[i]<-cor(b[,1],b[,2],use = "na.or.complete", method="spearman")
}
a[lag+1] <- cor(x,y,use = "na.or.complete", method="spearman")
for (i in 1:lead) {
b <- na.omit(cbind(cv.lead(x,i),y))
a[i+lag+1] <- cor(b[,1],b[,2],use = "na.or.complete", method="spearman")
}
View(a)
lag <- 12
x <- pp.matrix[,1]
y <- ndvi.matrix[,1]
a <- data.frame(matrix(nrow = 1, ncol = lag + 1))
for(i in 1:lag){
b <- na.omit(cbind(cv.lag(x,i),y))
a[i]<-cor(b[,1],b[,2],use = "na.or.complete", method="spearman")
}
a[lag+1] <- cor(x,y,use = "na.or.complete", method="spearman")
View(a)
b <- na.omit(cbind(cv.lag(pp.matrix[,1],12),ndvi.matrix[,1]))
b
View(b)
cv.lag(pp.matrix[,1],12)
df_pp <-data.frame(date=date,data_pp)  %>%
mutate(month = substr(date, 6, 7), year = substr(date, 1, 4)) %>%
group_by(year,month) %>%
summarize(pp = mean(data_pp,na.rm = T)) %>%
pivot_wider(names_from = month, values_from= pp) %>%
relocate("01", .after= year) %>%
dplyr::filter(year %in% seq("2000","2017"))
df_pp[,2:13] %>%  t() %>%  as.matrix()
cor(ndvi.matrix,pp.matrix)
cor(pp.matrix,ndvi.matrix, method = "spearman")
b <- na.omit(cbind(cv.lag(pp.matrix[,1],18),ndvi.matrix[,1]))
b
b
b <- na.omit(cbind(cv.lag(pp.matrix[,1],3),ndvi.matrix[,1]))
b
a <- data.frame(matrix(nrow = 1, ncol = lag + 1))
for(i in 1:ncol(x)){
for j in 1:length(lag){
y <- pp.matrix
x <- ndvi.matrix
lag <- 12
a <- data.frame(matrix(nrow = 1, ncol = lag + 1))
for(i in 1:ncol(x)){
for(j in 1:length(lag)){
a[i]<- cor(x[,i],y[,i+j], method="spearman")
}
}
pp.matrix[,2]
length(lag)
lag <- 12
a <- data.frame(matrix(nrow = 1, ncol = lag + 1))
for(i in 1:ncol(x)){
for(j in 1:length(lag)){
a[i]<- cor(x[,i],y[,i+j], method="spearman")
}
}
ncol(x)
a <- data.frame(matrix(nrow = 1, ncol = lag + 1))
lag <- 0
for(i in 1:ncol(x)){
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
lag = lag + 1
}
a <- data.frame(matrix(nrow = 1, ncol = ncol(x)))
lag <- 0
for(i in 1:ncol(x)){
lag = lag + 1
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
}
lag
a <- data.frame(matrix(nrow = 1, ncol = ncol(x)+1))
lag <- 0
for(i in 1:ncol(x)){
lag = lag + 1
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
}
a <- data.frame(matrix(nrow = 1, ncol = ncol(x)+1))
lag <- 0
for(i in 1:ncol(x)){
print(i)
lag = lag + 1
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
}
a
a
y <- pp.matrix
x <- ndvi.matrix
a <- data.frame(matrix(nrow = 1, ncol = ncol(x)+1))
for(i in 1:ncol(x)){
lag = 0
while(i+lag <= ncol(x)){
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
lag = lag + 1
}
}
View(a)
y <- pp.matrix
x <- ndvi.matrix
a <- data.frame(matrix(nrow = 1, ncol = ncol(x)))
for(i in 1:ncol(x)){
lag = 0
while(i+lag <= ncol(x)){
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
lag = lag + 1
}
}
View(a)
cor(x[,1],y[,1],method="spearman")
cor(x[,1],y[,2],method="spearman")
cor(x[,1],y[,3],method="spearman")
cor(x[,1],y[,4],method="spearman")
cor(x[,1],y[,5],method="spearman")
cor(x[,1],y[,6],method="spearman")
y <- pp.matrix
x <- ndvi.matrix
a <- data.frame(matrix(nrow = 1, ncol = ncol(x)))
for(i in 1:ncol(x)){
lag = 0
while(i+lag <= ncol(x)){
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
lag = lag + 1
}
}
x[,1]
y[,1]
for(i in 1:ncol(x)){
lag = 0
while(i+lag <= ncol(x)){
print(i)
a[i]<- cor(x[,i],y[,i+lag], method="spearman")
lag = lag + 1
print(lag)
}
}
