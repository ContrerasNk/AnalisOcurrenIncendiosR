knitr::include_graphics('Img/metodologia_4etapas.jpg')
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(rgee)
library(mapedit)
library(raster)
library(cptcity)
library(leaflet)
library(leaflet.extras)
library(leafpop)
library(MASS)
library(dplyr)
library(tidyverse)
library(rgee)
# Inicializando sesion en GEE
ee_Initialize('juliocontreras1', drive =TRUE)
# Incendios acumulados por mes
shp   <- 'Materiales/registro_incendios_2000_2018.gpkg'
fires <- st_read(shp) %>%
mutate(Date = paste(`AñO`,
MES_N, 1,
sep = '-')) %>%
group_by(Date) %>%
summarise(nfires = length(Date)) %>%
mutate(Date = as.Date(Date)) %>%
arrange(Date) %>%
as.data.frame() %>%
dplyr::select(-geom)
# Como no todos los meses hay incendios se necesita tener todos los meses para generar el histograma
ts    <- data.frame(Date = seq(as.Date('2000-08-01'),
as.Date('2018-12-01'),
by = 'month')) %>%
full_join(fires)
# Generación del histograma
X <- ggplot(ts, aes(x=Date, y=nfires)) +
geom_bar(stat="identity",
fill="gray",
colour="black") +
theme_bw() +
ylab(label = 'Número de incendios\n') +
xlab(label = '') +
ggtitle(paste('Eventos de incendios \ndel año 2000 al 2018', sep = '')) +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size=15),
axis.text.x  = element_text(size=11, angle = 75, hjust = 1),
axis.text.y  = element_text(size=11),
axis.title.y = element_text(size = 12, hjust = 0.5, face = 'bold', vjust = 0.5)) +
scale_x_date(limits = c(as.Date('2000-07-01'),
as.Date('2019-01-01')),
date_labels = ("%Y"),
breaks = '1 year') +
scale_y_continuous(breaks = seq(0,500,50))
X
# Incendios acumulados por mes
Departamentos <- st_read('Materiales/Departamentos.gpkg')
shp   <- 'Materiales/registro_incendios_2000_2018.gpkg'
fires <- st_read(shp) %>%
mutate(Date = paste(`AñO`), Fecha = paste(`AñO`, MES_N, DIA, sep = '-')) %>%
as.data.frame() %>%
dplyr::select(Date, Fecha, LOCALIDAD,
DES_EMERGE, DES_FUENTE, DES_DANO,
NOMBDIST, NOMBPROV, NOMBDEP, COOR_X, COOR_Y, -geom)
names(fires) <- c("Date", "Fecha", "Localidad",
"Causa", "Acción", "Daños",
"Distrito", "Provincia", "Departamento", "Longitud", "Latitud")
# Este es más dinámico
Number_JmType <- fires$Date %>% unique() %>% length() # Numero de especies
Names_JmType <- fires$Date %>% unique() ## Nombre de las especies
Colores <- c("#ef3b2c", "#ffffff", "#807dba", "#33a02c", "#fed976",
"#000000", "#0570b0", "#a6cee3", "#1f78b4", "#b2df8a",
"#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00",
"#cab2d6", "#6a3d9a", "#b15928") # colorbrewer2, Colores de las especies seran
pal <- colorFactor(Colores, domain = Names_JmType) # Generamos la paleta
# Partimos un sf en varios sf
Spp_Pres <- list()
for (i in 1:length(Names_JmType)) {
Spp_Pres[[i]] <- fires %>% dplyr::filter(Date == Names_JmType[i])
}
names(Spp_Pres) <- Names_JmType
# Ploteamos cada sf, pero sin leyenda
Spp_Map <- leaflet() %>% addTiles(urlTemplate = "https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png") %>%
addPolygons(data = Departamentos, fillOpacity = 0, weight = 1, opacity = 1,
label = ~DEPARTAMEN, color = "#ef3b2c", group = "Departamentos")
for (i in 1:length(Spp_Pres)) {
Spp_Map <- Spp_Map %>%
addCircleMarkers(data = Spp_Pres[[i]],
lat = ~Latitud, lng = ~Longitud, fillColor = ~pal(Date),
fillOpacity = 0.8, radius = 6, weight = 0.5, label = ~Provincia,
color = ~pal(Date), group =  Names_JmType[i],
popup = popupTable((Spp_Pres[[i]])[,2:length(Spp_Pres[[i]])],
row.numbers = F, feature.id = F))
}
# Agremos leyenda y su visualizador por grupos, tanto leyenda como suelos
Spp_Map <- Spp_Map %>%
addLegend(data = fires, "bottomleft", pal = pal,
values = ~Date, title = "Inc: 2000-2018",
opacity = 0.8, group = "Leyenda") %>%
addLayersControl(overlayGroups = c("Leyenda"), baseGroups = Names_JmType,
options = layersControlOptions(collapsed = FALSE), position = "topright")
Spp_Map
fires  <- st_read('Materiales/registro_incendios_2000_2018.gpkg')
peru <- st_read('Materiales/Peru.gpkg')
Departamentos <- st_read('Materiales/Departamentos.gpkg')
# Extracción de coordenadas de los puntos
fires_df <- st_coordinates(fires) %>% as.data.frame()
names(fires_df) <- c('lon','lat')#here
# Aplicación de la estimación
kde <- kde2d(fires_df$lon, fires_df$lat, n = 250, h = .5, lims = c(-86, -65, -19, 0))
kde_raster <- kde %>% raster() %>% crop(peru) %>% mask(peru)
# image(kde)
# plot(peru, add = T, col = NA)
# Convirtiendolo a raster:
#
# kde_raster <- kde %>% raster()
# kde_raster[kde_raster < 0.05] = NA
# kde_raster[kde_raster >= 0.05] = 1
# writeRaster(kde_raster, 'raster2.tif')
# summary(kde_raster %>% getValues() %>% as_vector())
# Mapa con leaflet
# pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(kde_raster ), na.color = "transparent")
pal <- colorNumeric(c("#3182bd", "#fec44f", "#f03b20"), values(kde_raster), na.color ="transparent")
m <- leaflet() %>%
addTiles() %>%
addRasterImage(kde_raster, colors = pal) %>%
addLegend(pal = pal, values = values(kde_raster),title = "% Incendios") %>%
addPolygons(data = Departamentos,
fillOpacity = 0,
weight = 2,
opacity = 1,
label = ~DEPARTAMEN,
color = "#000000",
group = "Departamentos")
leaflet() %>%
addTiles() %>%
addRasterImage(kde_raster, colors = pal) %>%
addLegend(pal = pal, values = values(kde_raster),title = "% Incendios") %>%
addPolygons(data = Departamentos,
fillOpacity = 0,
weight = 2,
opacity = 1,
label = ~DEPARTAMEN,
color = "#000000",
group = "Departamentos")
# Inicializando sesion en GEE
ee_Initialize('juliocontreras1', drive =TRUE)
# Incendios acumulados por mes
shp   <- 'Materiales/registro_incendios_2000_2018.gpkg'
fires <- st_read(shp) %>%
mutate(Date = paste(`AñO`,
MES_N, 1,
sep = '-')) %>%
group_by(Date) %>%
summarise(nfires = length(Date)) %>%
mutate(Date = as.Date(Date)) %>%
arrange(Date) %>%
as.data.frame() %>%
dplyr::select(-geom)
# Como no todos los meses hay incendios se necesita tener todos los meses para generar el histograma
ts    <- data.frame(Date = seq(as.Date('2000-08-01'),
as.Date('2018-12-01'),
by = 'month')) %>%
full_join(fires)
# Generación del histograma
X <- ggplot(ts, aes(x=Date, y=nfires)) +
geom_bar(stat="identity",
fill="gray",
colour="black") +
theme_bw() +
ylab(label = 'Número de incendios\n') +
xlab(label = '') +
ggtitle(paste('Eventos de incendios \ndel año 2000 al 2018', sep = '')) +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size=15),
axis.text.x  = element_text(size=11, angle = 75, hjust = 1),
axis.text.y  = element_text(size=11),
axis.title.y = element_text(size = 12, hjust = 0.5, face = 'bold', vjust = 0.5)) +
scale_x_date(limits = c(as.Date('2000-07-01'),
as.Date('2019-01-01')),
date_labels = ("%Y"),
breaks = '1 year') +
scale_y_continuous(breaks = seq(0,500,50))
X
# Incendios acumulados por mes
Departamentos <- st_read('Materiales/Departamentos.gpkg')
shp   <- 'Materiales/registro_incendios_2000_2018.gpkg'
fires <- st_read(shp) %>%
mutate(Date = paste(`AñO`), Fecha = paste(`AñO`, MES_N, DIA, sep = '-')) %>%
as.data.frame() %>%
dplyr::select(Date, Fecha, LOCALIDAD,
DES_EMERGE, DES_FUENTE, DES_DANO,
NOMBDIST, NOMBPROV, NOMBDEP, COOR_X, COOR_Y, -geom)
names(fires) <- c("Date", "Fecha", "Localidad",
"Causa", "Acción", "Daños",
"Distrito", "Provincia", "Departamento", "Longitud", "Latitud")
# Este es más dinámico
Number_JmType <- fires$Date %>% unique() %>% length() # Numero de especies
Names_JmType <- fires$Date %>% unique() ## Nombre de las especies
Colores <- c("#ef3b2c", "#ffffff", "#807dba", "#33a02c", "#fed976",
"#000000", "#0570b0", "#a6cee3", "#1f78b4", "#b2df8a",
"#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00",
"#cab2d6", "#6a3d9a", "#b15928") # colorbrewer2, Colores de las especies seran
pal <- colorFactor(Colores, domain = Names_JmType) # Generamos la paleta
# Partimos un sf en varios sf
Spp_Pres <- list()
for (i in 1:length(Names_JmType)) {
Spp_Pres[[i]] <- fires %>% dplyr::filter(Date == Names_JmType[i])
}
names(Spp_Pres) <- Names_JmType
# Ploteamos cada sf, pero sin leyenda
Spp_Map <- leaflet() %>% addTiles(urlTemplate = "https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png") %>%
addPolygons(data = Departamentos, fillOpacity = 0, weight = 1, opacity = 1,
label = ~DEPARTAMEN, color = "#ef3b2c", group = "Departamentos")
for (i in 1:length(Spp_Pres)) {
Spp_Map <- Spp_Map %>%
addCircleMarkers(data = Spp_Pres[[i]],
lat = ~Latitud, lng = ~Longitud, fillColor = ~pal(Date),
fillOpacity = 0.8, radius = 6, weight = 0.5, label = ~Provincia,
color = ~pal(Date), group =  Names_JmType[i],
popup = popupTable((Spp_Pres[[i]])[,2:length(Spp_Pres[[i]])],
row.numbers = F, feature.id = F))
}
# Agremos leyenda y su visualizador por grupos, tanto leyenda como suelos
Spp_Map <- Spp_Map %>%
addLegend(data = fires, "bottomleft", pal = pal,
values = ~Date, title = "Inc: 2000-2018",
opacity = 0.8, group = "Leyenda") %>%
addLayersControl(overlayGroups = c("Leyenda"), baseGroups = Names_JmType,
options = layersControlOptions(collapsed = FALSE), position = "topright")
Spp_Map
fires  <- st_read('Materiales/registro_incendios_2000_2018.gpkg')
peru <- st_read('Materiales/Peru.gpkg')
Departamentos <- st_read('Materiales/Departamentos.gpkg')
# Extracción de coordenadas de los puntos
fires_df <- st_coordinates(fires) %>% as.data.frame()
names(fires_df) <- c('lon','lat')#here
# Aplicación de la estimación
kde <- kde2d(fires_df$lon, fires_df$lat, n = 250, h = .5, lims = c(-86, -65, -19, 0))
kde_raster <- kde %>% raster() %>% crop(peru) %>% mask(peru)
# image(kde)
# plot(peru, add = T, col = NA)
# Convirtiendolo a raster:
#
# kde_raster <- kde %>% raster()
# kde_raster[kde_raster < 0.05] = NA
# kde_raster[kde_raster >= 0.05] = 1
# writeRaster(kde_raster, 'raster2.tif')
# summary(kde_raster %>% getValues() %>% as_vector())
# Mapa con leaflet
# pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(kde_raster ), na.color = "transparent")
pal <- colorNumeric(c("#3182bd", "#fec44f", "#f03b20"), values(kde_raster), na.color ="transparent")
m <- leaflet() %>%
addTiles() %>%
addRasterImage(kde_raster, colors = pal) %>%
addLegend(pal = pal, values = values(kde_raster),title = "% Incendios") %>%
addPolygons(data = Departamentos,
fillOpacity = 0,
weight = 2,
opacity = 1,
label = ~DEPARTAMEN,
color = "#000000",
group = "Departamentos")
m
Provincias <- st_read('Materiales/Provincias.gpkg')
Anta <- st_read('Materiales/Anta.gpkg')
names(Provincias)
kde_raster_clas <- kde_raster
kde_raster_clas[kde_raster < 0.05] = NA
kde_raster_clas[kde_raster >= 0.05] = 1
# writeRaster(kde_raster, 'raster2.tif')
leaflet() %>%
addTiles() %>%
addRasterImage(kde_raster_clas,
colors = "#f03b20") %>%
# addLegend(pal = pal, values = values(kde_raster),title = "% Incendios") %>%
addPolygons(data = Provincias,
fillOpacity = 0,
weight = 2,
opacity = 1,
label = ~PROVINCIA,
color = "#000000",
group = "Provincias") %>%
addPolygons(data = Anta,
fillOpacity = 0,
weight = 4,
opacity = 1,
label = ~PROVINCIA,
color = "#54278f",
group = "Anta")
Provincias <- st_read('Materiales/Provincias.gpkg')
Anta <- st_read('Materiales/Anta.gpkg')
names(Provincias)
kde_raster_clas <- kde_raster
kde_raster_clas[kde_raster < 0.05] = NA
kde_raster_clas[kde_raster >= 0.05] = 1
# writeRaster(kde_raster, 'raster2.tif')
leaflet() %>%
addTiles() %>%
addRasterImage(kde_raster_clas,
colors = "#f03b20") %>%
# addLegend(pal = pal, values = values(kde_raster),title = "% Incendios") %>%
addPolygons(data = Provincias,
fillOpacity = 0,
weight = 2,
opacity = 1,
label = ~PROVINCIA,
color = "#000000",
group = "Provincias") %>%
addPolygons(data = Anta,
fillOpacity = 0,
weight = 4,
opacity = 1,
label = ~PROVINCIA,
color = "#54278f",
group = "Anta")
fires <- st_read('Materiales/registro_incendios_2000_2018.gpkg')
yr <- 2016
# CREACI?N Y MANIPULACI?N DE TABLA PARA EL PLOTEO
a <- fires %>% group_by(Date = paste(`AñO`, MES_N, sep = '-')) %>%
summarise(nfires = length(Date)) %>%
group_by(MES = substr(Date,6,7)) %>%
summarise(fires_mean = mean(nfires, na.rm = T), fires_max  = max(nfires, na.rm = T)) %>%
mutate(MES = as.numeric(MES)) %>% arrange(MES) %>% as.data.frame() %>% dplyr::select(-geom)
b <- fires %>% filter(`AñO`== yr) %>%
mutate(MES = MES_N) %>%
group_by(MES) %>%
summarise(fires_anom = length(MES)) %>%
as.data.frame() %>% dplyr::select(-geom)
df <- data.frame(MES = c(1:12)) %>%
full_join(a, by = 'MES') %>%
full_join(b, by = 'MES') %>%
dplyr::select(-MES) %>%
mutate(Date = seq(as.Date('2018-01-01'), as.Date('2018-12-01'), by='month'),
fires_mean = ifelse(is.na(fires_mean), 0, fires_mean),
fires_max  = ifelse(is.na(fires_max), 0, fires_max),
fires_anom = ifelse(is.na(fires_anom), 0, fires_anom),
label_mean = 'mean', label_max = 'max', label_anom = 'anom')
# CAMBIO DE IDIOMA
Sys.setlocale(category = "LC_ALL", locale = "english")
# PLOTEO
X <- ggplot(df) +
geom_bar(aes(x = Date, y = fires_mean, fill = label_mean),
stat = "identity", fill = 'blue', colour = 'blue', alpha = 0.4) +
geom_bar(aes(x = Date, y = fires_anom, fill = label_anom),
stat = "identity", fill = 'gray', colour = 'black', alpha = 0.4) +
geom_bar(aes(x = Date, y = fires_max,  fill = label_max),
stat = "identity", colour = 'red', alpha=0) +
ggtitle('Comportamiento Mensual de Incendios',
subtitle = paste0('Desde 2000 to 2018\nAño ', as.character(yr))) +
theme_bw() + labs(y = 'Número de incendios', x = '') +
theme(plot.title    = element_text(size = 20, hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(size = 12, hjust = 0.5, face = 'italic'),
axis.text.x   = element_text(size = 12, hjust = 1),
axis.text.y   = element_text(size = 12),
axis.title.y  = element_text(size = 15, hjust = 0.5, face = 'bold', vjust = 0.5))  + #
scale_x_date(date_labels = "%b", breaks = '1 month') +
scale_y_continuous(breaks = seq(0,140,20), limits = c(0, 140)) +
theme(legend.position = "none", )
X
element_rect(
fill = NULL,
colour = NULL,
size = NULL,
linetype = NULL,
color = NULL,
inherit.blank = FALSE
)
# ggtitle(paste('Eventos de incendios \ndel año 2000 al 2018', sep = '')) +
# theme(plot.title = element_text(hjust = 0.5, face = 'bold', size=15),
#       axis.text.x  = element_text(size=11, angle = 75, hjust = 1),
#       axis.text.y  = element_text(size=11),
#       axis.title.y = element_text(size = 12, hjust = 0.5, face = 'bold', vjust = 0.5))
# ggsave(plot = X, filename = 'D:/DataBase/Theme_n2/04-Graphics/Bar_Fires_2016.png',
#        width = 15, height = 15, units = "cm", dpi = 500)
# Función para los filtros con la banda quality pilxles qa
getQABits <- function(image, qa) {
# Convert binary (character) to decimal (little endian)
qa <- sum(2^(which(rev(unlist(strsplit(as.character(qa), "")) == 1))-1))
# Return a mask band image, giving the qa value.
image$bitwiseAnd(qa)$lt(1)
}
# Usando getQABits construimos una sola variable para la funcion'mod13A2_clean'
mod13A2_clean <- function(img) {
# Extract the NDVI band
ndvi_values <- img$select("NDVI")
# Extract the quality band
ndvi_qa <- img$select("SummaryQA")
# Select pixels to mask
quality_mask <- getQABits(ndvi_qa, "10")
# Mask pixels with value zero.
ndvi_values$updateMask(quality_mask)
}
# La Region de interes es anta, pero puede variar según sigamos el proceso
Anta <- st_read('Materiales/Anta.gpkg')
# Generamos el centroide para la correcta visualizacion
centroid <- st_centroid(Anta)
X <- (st_coordinates(centroid))[,"X"]
Y <- (st_coordinates(centroid))[,"Y"]
ee_roi <- Anta %>%
st_geometry() %>%
sf_as_ee()
# La Region de interes es anta, pero puede variar según sigamos el proceso
Anta <- st_read('Materiales/Anta.gpkg')
# Generamos el centroide para la correcta visualizacion
centroid <- st_centroid(Anta)
X <- (st_coordinates(centroid))[,"X"]
Y <- (st_coordinates(centroid))[,"Y"]
ee_roi <- Anta %>%
st_geometry() %>%
sf_as_ee()
install.packages("geojsonio")
